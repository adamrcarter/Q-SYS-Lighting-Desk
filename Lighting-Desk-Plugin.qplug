-- Base Plugin
-- by QSC
-- Month 20YY

PluginInfo = {
    Name = "Virtual Lighting Desk",
    Version = "0.1.0",
    Id = "321312",
    Description = "A Virtual Lighting Desk for Q-SYS",
    ShowDebug = true
}

function GetColor(props)
  return { 102, 102, 102 }
end

function GetPrettyName(props)
  return "Base Plugin " .. PluginInfo.Version
end

function GetPages()
  pages = {}

  table.insert(pages, {name = "Desk"})

  return pages
end

function GetProperties()
  props = {}

  table.insert(props,
    {
      Name = "Channels",
      Type = "integer",
      Min = 1,
      Max = 256,
      Value = 24,
    }
  )
  table.insert(props,
    {
      Name = "Scenes",
      Type = "integer",
      Min = 1,
      Max = 64,
      Value = 16,
    }
  )
  
  return props
end

function GetControls(props)
  ctrls = {}

  local channelCount = props["Channels"].Value
  local sceneCount = props["Scenes"].Value
  
  table.insert(ctrls,
      {
          Name = "ChannelFader",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Min = 0,
          Max = 255,
          PinStyle = "Both",
          Count = channelCount,
      })
      table.insert(ctrls,
      {
          Name = "SceneFader",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Min = 0,
          Max = 255,
          PinStyle = "Both",
          Count = sceneCount,
      })
      table.insert(ctrls,
      {
          Name = "MasterFader",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Min = 0,
          Max = 100,
          PinStyle = "Both",
          Count = 1,
      })
      table.insert(ctrls,
      {
          Name = "SceneRecord",
          ControlType = "Button",
          ButtonType = "Momentary",
          PinStyle = "Both",
          Count = sceneCount,
      })
      table.insert(ctrls,
      {
          Name = "ChannelLED",
          ControlType = "Indicator",
          IndicatorType = "LED",
          PinStyle = "Both",
          Count = channelCount,
      })
      

  return ctrls
end

function GetControlLayout(props)
  layout   = {}
  graphics = {}

  local channelNum = props["Channels"].Value
  local sceneNum = props["Scenes"].Value
  local channelGap = 36
  
  for i=1, channelNum do
      local ctl_str = tostring(channelNum==1 and "" or " "..i)
      layout["ChannelFader"..ctl_str] =
      {
          PrettyName = string.format( "Channel~Fader %i",i ),
          Style = "Fader",
          Color = {110, 198, 241},
          Size = {36, 128},
          Position = {55+36*(i-1), 230},
      }
      layout["ChannelLED"..ctl_str] =
      {
          PrettyName = string.format( "Channel~LED %i",i ),
          Style = "Led",
          Color = {0,0,255},
          OffColor = {0,0,123},
          Size = {16, 16},
          Position = {(55+(channelGap-16))+36*(i-1), 230-30}
      }
  end
  
  for i=1, sceneNum do
      local ctl_str = tostring(sceneNum==1 and "" or " "..i)
      layout["SceneFader"..ctl_str] =
      {
          PrettyName = string.format( "Scene~Fader %i",i ),
          Style = "Fader",
          Color = {110, 198, 241},
          Size = {36, 128},
          Position = {(55+(channelGap-16))+36*(i-1), 455}
      }
      layout["SceneRecord"..ctl_str] =
      {
          PrettyName = string.format( "Scene~Record %i",i ),
          Style = "Button",
          Color = {105,105,255},
          OffColor = {100,100,123},
          Size = {36, 16},
          Position = {55+36*(i-1), 455+140},
          ButtonStyle = "Momentary",
      }
  end
  
  layout["MasterFader"] = 
      {
          PrettyName = string.format( "Master~Fader"),
          Style = "Fader",
          Color = {255, 30, 40},
          Size = {36, 128},
          Position = {(55+50)+36*(sceneNum), 455},
      }
  
  graphics ={
      {
          Type = "GroupBox",
          Fill = {230, 240, 245},
          CornerRadius = 8,
          StrokeColor = {255,255,255},
          StrokeWidth =1,
          Postion = {0,0},
          Size = {104*(sceneNum-1), 620}
      }
  }

  return layout, graphics
end

function GetPins(props)
  local pins = {}
  for i=1, props["Channels"].Value do
  table.insert(pins,
{
  Name = string.format("Out %i", i),
  Direction = "output",
})
end
return pins
end

--Start event based logic
if Controls then

  --*************************************************************
  --*************************************************************
  
  --CHANGE THE TWO VARIBALES BELOW TO YOUR NUMBER OPF SCENES AND CHANNELS NEEDED, SCENE FADER MUST EQUAL THE AMOUNT OF MOMENTARY BUTTONS CONNECTED TO THE CONTROL SCRIPT INPUT
  --CHANNEL FADERS ARE CONNECTED TO CONTROL SCRIPT FIRST AND MUST BE AN INTEGER FADER/KNOB FROM 0 - 255 IN VALUE
  --SCENES FADER ARE CONNECTED TO THE CONTROL SCRIPT INPUT NUMBER : NUM_CHANNELS +1 AND ALSO BE AN INTEGER FADER/KNOB FROM 0 - 255 IN VALUE
  --MASTER FADER MUST BE CONNECTED TO CONTROL SCRIPT INPUT NUMBER : NUM_CHANNELS + NUM_SCENES +1. 
  --MOMENTARY BUTTON ARE USED FOR SCENE STATE RECORDERS THEY ARE CONNECTED TO CONTROL SCRIPT INPUT NUMBER: NUM_CHANNELS + NUM_SCENES +2 
  --OUTPUT CVUSTOM CONTROL LEDS ARE TO BE LINKED UP ON THE OUPUT PINS AFTER THE TEXT OUTPUT. BOTH THESE OUPUT PINS ARE EQUAL TO THE NUMBER OF CHANNELS 
  
  NUM_CHANNELS = #Controls.ChannelFader -- CHANGE THIS VARIABLE FOR NUMBER OF CHANNELS IN YOUR DESK DESIGN
  NUM_SCENES  = #Controls.SceneFader -- CHANGE THIS VARIABLE FOR NUMBER OF SCENE FADERS IN YOUR DESK DESIGN
  
  
  --******************************************************
  --******************************************************
  
  
  -- Create meta classes 
  local channels = {}
  local subgroup = {}
  local master = {}
  local output = {}
  
  
  ------------------------
  --CHANNEL CLASS
  ------------------------
  channels.new = function(id, value) 
    local self = {}
    local value = value
    local inputId = id 
  
  self.setValue = function(_value)
    value = _value
    end
  self.printValue = function(arg) 
    print(value)
  end
  
  self.getValue = function()
    return value
  end
  
  self.getId = function()
    return inputId
  end
  return self
  end
  
  --------------------------
  -- SUBGROUP CLASS
  --------------------------
  subgroup.new = function(id, _value)
    local self = {}
    local channelStateArray = {}
    local groupId = id 
    local value = _value
     
  self.setSceneState = function(channelStates)
    for i=1,NUM_CHANNELS do 
      channelStateArray[i] = channelStates[i].getValue()
    end
  end  
  
  self.setFaderValue = function(_value)
    value = _value
  end
  
  self.printValue = function()
    print(value)
  end
  
  self.printState = function()
    print("Subgroup state: ")
    for i=1,NUM_CHANNELS do
    if channelStateArray[i] == nil then
      print("nil")
    else
      print(channelStateArray[i])
    end
    end
    
  end
  
  self.getChannelStateArray = function()
    return channelStateArray
  end
  
  self.getFaderValue = function()
    return value
    end
  return self
  end
  
  -----------------
  --OUTPUT CLASS
  -----------------
  output.new = function(channel, id, master)
    self = {}
    self.channel = channel
    self.ouputValue = Controls.Outputs[id].Value
    local master = master
  
  self.findHighest = function(v1, v2)
    if v1 > v2 then
      return v1
    else
      return v2
    end
  end
  -- ADDS TOGETHER SCENE STATE AND MAPS IT TO CHANNELS OUPUT
  self.addScenesToOutput = function(subgroupArray, event)
    local _val
    local subgroup
    local subgroupFaderVal
    local highestvalue = 0
  
    for i=1,NUM_SCENES do
      subgroup = subgroupArray[i]
      subgroupFaderVal = subgroup.getFaderValue()
      if subgroup.getChannelStateArray()[event.Index] ~= nil then 
        channelValue = subgroup.getChannelStateArray()[event.Index]
        if subgroupFaderVal == 0 then 
          _val = 0
        end
        _val = math.floor((channelValue * (subgroupFaderVal / 255))+0.5) --ROUND VALUES AND APPLY SCENCE STATE TO OUPUT PROPORTIONAL TO THE SCENES FADER POSITION
        highestvalue = self.findHighest(highestvalue, _val)   --ADD TOGETHER SCENES CHANNEL OUTPUTS IF THERE IS MORE THAN ONE OF CHANNELS IN RECORDED SCENE STATE
       end   
    end
    if highestvalue > 255 then prevvalue = 255 end --CATCH ANY ATTEMPT TO EXCEED 255
    self.outputValue = prevvalue
    return highestvalue
  end 
  
  --CALCULATE THE OUPUT BASED ON CHANNELS FADER POSTION AND THE SUMED CHANNEL VALUE OF THE SUBGROUP
  self.calculateOutput = function(subgroupLevel, channelArray, event)
    if subgroupLevel == nil then subgroupLevel = 0 end
    local outputValue = self.findHighest(channelArray[event.Index].getValue(),  subgroupLevel)
    if outputValue > 255 and subgroupLevel ~= 0 then outputValue  = 255 end 
    outputValue = math.floor((outputValue * master)+0.5) --ROUND OUPUT VAL
    return outputValue
  end
  
  self.printValue = function()
    print("ouput= ", self.OutputValue)
  end
  
  self.setMaster= function(arg)
    master = arg
  end
  return self
  end
  
  master = 1
  
  --Create new objects for all classes
  local channelArray = {}
  
  for i=1,NUM_CHANNELS do
    channelArray[i]= channels.new(i, Controls.ChannelFader[i].Value)
  end
  --for i,v in ipairs(channelArray) do print(i,v.getValue()) end
  
  local subgroupArray = {}
  for i=1, NUM_SCENES do
    table.insert(subgroupArray, subgroup.new(i, Controls.SceneFader[i].Value, channelArray))
  end
  
  
  local outputArray = {}
  for i=1, NUM_CHANNELS do
    table.insert(outputArray, output.new(channelArray[i].getValue(), channelArray[i].getId(), master)) 
  end
  -----------------------------------------------------
  --EVENT HANDLER FUNCTIONS FOR FADERS + SCENE BUTTONS
  ------------------------------------------------------
  function handleRecordPress(event)
    local indexCorrection = (NUM_SCENES + NUM_CHANNELS) + 1 -- takes into count nnum of scenes and their buttons plus master fader
    subgroupArray[event.Index].setSceneState(channelArray)
    subgroupArray[event.Index].printState()
  end
  
  function handleCHFaderChange(event)
    channelArray[event.Index].setValue(event.Value)
    local subgroupLevel = outputArray[event.Index].addScenesToOutput(subgroupArray, event)
    Controls.Outputs[i].Value = outputArray[event.Index].calculateOutput(subgroupLevel, channelArray, event)
    Controls.Outputs[i].String = Controls.Outputs[i].Value
    if Controls.Outputs[i].Value > 0 then Controls.ChannelLED[event.Index].Value = true else Controls.ChannelLED[event.Index].Value = false end
  end
  
  function handleSceneFaderChange(event)
    subgroupArray[event.Index].setFaderValue(event.Value)
    subgroupArray[event.Index].printState()
   
    for i=1,NUM_CHANNELS do -- iterate over each ouput and calculate the output value
      e = {["Index"]= i} --SIMULATE AN EVENT 
      local subgroupLevel = outputArray[i].addScenesToOutput(subgroupArray, e)
      Controls.Outputs[i].Value = outputArray[i].calculateOutput(subgroupLevel, channelArray, e) 
      Controls.Outputs[i].String = Controls.Outputs[i].Value
      if Controls.Outputs[i].Value > 0 then Controls.ChannelLED[event.Index].Value = true else Controls.ChannelLED[event.Index].Value = false end
    end
  end
  
  function handleMasterFaderChange(event)
    master = Controls.Inputs[event.Index].Value/100
    
    for i=1,NUM_CHANNELS do -- iterate over each ouput and calculate the output value
      ev = {["Index"]= i} --SIMULATE AN EVENT 
      outputArray[i].setMaster(master)
      local subgroupLevel = outputArray[i].addScenesToOutput(subgroupArray, ev)
      Controls.Outputs[i].Value = outputArray[i].calculateOutput(subgroupLevel, channelArray, ev) 
      Controls.Outputs[i].String =  Controls.Outputs[i].Value
      if Controls.Outputs[i].Value > 0 then Controls.ChannelLED[event.Index].Value = true else Controls.ChannelLED[event.Index].Value = false end
    end
  end
  
  ---------------------------------------------
  --CONNECT INPUTS WITH EVENT HANDLER FUNCTION
  ---------------------------------------------
  for i=1,NUM_CHANNELS do
    Controls.ChannelFader[i].EventHandler = handleCHFaderChange
  end
  
  for i=1, NUM_SCENES do
    Controls.SceneFader[i].EventHandler = handleSceneFaderChange
  end
  
  for i=1, NUM_SCENES do
    Controls.SceneRecord[i].EventHandler = handleRecordPress
  end 
  
  Controls.MasterFader[1].EventHandler = handleMasterFaderChange
  
end
